#!/usr/bin/nodejs

var _ = require('lodash');
var child_process = require('child_process');
var minimist = require('minimist');
var os = require('os');

var options = minimist(process.argv.slice(2), {
    default: {
        arch: os.arch() + '|' + os.platform(),
        'log.level': 'debug',
    },
});

_.extend(exports, {
    help: usage,
    deploy: deploy,
});

if (module === require.main) {
    return main();
}

function main() {
    var command = options._[0];
    if (!command) {
        usage();
        console.error('I need a command to do anything useful.');
        return process.exit(1);
    }

    var commandFn = _.get(exports, command);
    if (!commandFn) {
        console.error('Command not implemented:', command);
        return process.exit(1);
    }

    return commandFn();
}

function usage() {
    console.info('\
Usage: hapili COMMAND [OPTIONS]\n\
\n\
    deploy SERVER   Deploys Hapili to a target server, specified by its\n\
                    dns name or ip address\n\
\n\
    master          Run Hapili as a master server, and start the web\n\
                    server for access to the user interface\n\
\n\
    node MASTER     Run Hapili as a member node connected to a master\n\
                    server with the specified dns or ip address\n\
\n');
}

function deploy() {
    var server = options._[1];
    if (!server) {
        console.error('Which server?');
        return process.exit(1);
    }

    var rsync = 'rsync';
    var args = ['-rv', '--exclude-from=.rsync-exclude', '.', server + ':/opt/hapili'];
    var child = child_process.execFile('rsync', args, function(error, stdout, stderr) {
        if (stdout) {
            console.info(stdout);
        }
        if (stderr) {
            console.error(stderr);
        }
        if (error) {
            return process.exit(1);
        }

        console.info('ok.');
    });
}
